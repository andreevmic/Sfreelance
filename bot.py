import asyncio
import logging
from aiogram.fsm.storage.base import StorageKey
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, CallbackQuery 
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.bot import DefaultBotProperties
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from helpers import *
from db import *
from aiogram.methods import DeleteMessages
from functools import wraps
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import BaseMiddleware
from typing import Callable, Awaitable, Dict, Any

#–í—Ä–µ–º–µ–Ω–Ω–∞—è--------------------------------------------------------------
import psycopg2
from psycopg2.extras import RealDictCursor

conn = psycopg2.connect(
    dbname="freelance_bot",
    user="postgres",
    password="5757",
    host="localhost"
)
cursor = conn.cursor(cursor_factory=RealDictCursor)
#–í—Ä–µ–º–µ–Ω–Ω–∞—è--------------------------------------------------------------

class BanMiddleware(BaseMiddleware):
    async def __call__(self, handler: Callable[[Message, Dict[str, Any]], Awaitable[Any]],
                       event: Message, data: Dict[str, Any]) -> Any:
        user_id = event.from_user.id
        if is_banned(user_id):
            await event.answer("‚õî –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
            return
        return await handler(event, data)

# ‚õî –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –≤—ã–∫–ª–∞–¥—ã–≤–∞–π —Ç–æ–∫–µ–Ω –≤ –æ—Ç–∫—Ä—ã—Ç—ã–π –¥–æ—Å—Ç—É–ø
API_TOKEN = ""

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

dp.message.middleware(BanMiddleware())

#---------------------------------------------------–ö–õ–ê–í–ò–ê–¢–£–†–´---------------------------------------------------

def get_order_keyboard(order: dict):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞"""
    builder = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
    if order['status'] == 'active':
        builder.button(text="üí¨ –ß–∞—Ç", callback_data=f"chat_{order['id']}")
        builder.button(text="üí¨ –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏", callback_data=f"chat_history_{order['id']}")
        builder.button(text="üìã –î–µ—Ç–∞–ª–∏", callback_data=f"details_{order['id']}")
    
    elif order['status'] == 'completed':
        builder.button(text="üí¨ –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏", callback_data=f"chat_history_{order['id']}")
        builder.button(text="üìã –î–µ—Ç–∞–ª–∏", callback_data=f"details_{order['id']}")

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞, –æ–∂–∏–¥–∞—é—â–µ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    elif order['status'] == 'pending_executor':
        builder.button(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_order_{order['id']}")
        builder.button(text="‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data=f"reject_order_{order['id']}")
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_orders")
    
    builder.adjust(2, 1)  # –ü–µ—Ä–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥, –ø–æ—Å–ª–µ–¥–Ω—è—è –æ—Ç–¥–µ–ª—å–Ω–æ
    return builder.as_markup()

def get_orders_keyboard(orders: list, page: int = 0, has_next: bool = False):
    builder = InlineKeyboardBuilder()
    
    for order in orders:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É —Å—Ç–∞—Ç—É—Å–∞
        if order['status'] == 'completed':
            status_icon = "‚úÖ"
        elif order['status'] == 'active':
            status_icon = "üü¢"
        elif order.get('status') == 'available':
            status_icon = "üü°"  # –ñ–µ–ª—Ç—ã–π –¥–ª—è –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        elif order['status'] == 'waiting':
            status_icon = "‚è≥"
        else:
            status_icon = "‚ùå"
        
        # –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ç–∏–ø–∞ –∑–∞–∫–∞–∑–∞
        order_type = ""
        if order.get('order_type') == 'pending_executor':
            order_type = " (–æ–∂–∏–¥–∞–µ—Ç –≤–∞—à–µ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)"
        
        builder.button(
            text=f"{status_icon} {order['title']}{order_type}",
            callback_data=f"order_{order['id']}_{order.get('order_type', 'order')}"
        )
    
    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    if page > 0:
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"orders_prev_{page}")
    if has_next:
        builder.button(text="‚ñ∂Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"orders_next_{page}")
    
    builder.adjust(1)  # –í—Å–µ –∫–Ω–æ–ø–∫–∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ
    return builder.as_markup()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∑–∞–∫–∞–∑–∞–º
def get_orders_navigation_kb(order_id: int):
    builder = InlineKeyboardBuilder()
    
    builder.button(text="üì® –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è", callback_data=f"respond_{order_id}")
    
    builder.adjust(2, 1)
    return builder.as_markup()

def get_active_chat_keyboard(order_id: int, has_older: bool = False):
    buttons = [
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"chat_prev_{order_id}")] if has_older else [],
        [InlineKeyboardButton(text="‚ñ∂Ô∏è –í–ø–µ—Ä—ë–¥", callback_data=f"chat_next_{order_id}")],
        [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑–∞–º")]
    ]
    
    # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Ä—è–¥—ã
    buttons = [row for row in buttons if row]
    
    return ReplyKeyboardMarkup(
        keyboard=buttons,
        resize_keyboard=True
    )

def get_executor_navigation_kb(page: int, has_next: bool, is_search: bool = False):
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if page > 0:
        nav_buttons.append(KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥"))
    if has_next:
        nav_buttons.append(KeyboardButton(text="‚ñ∂Ô∏è –í–ø–µ—Ä—ë–¥"))
    
    if nav_buttons:
        keyboard.append(nav_buttons)
    
    if is_search:
        keyboard.append([KeyboardButton(text="üîç –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ")])
    else:
        keyboard.append([KeyboardButton(text="üîç –ü–æ–∏—Å–∫")])
    
    keyboard.append([KeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é")])
    
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

def get_executor_inline_kb(executor_id: int):
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üì® –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑", callback_data=f"msg_{executor_id}"),
            InlineKeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data=f"info_{executor_id}")
        ]
    ])

# 2. Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
def get_back_to_menu_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚öôÔ∏è –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑")],
            [KeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )

def get_executor_browsing_keyboard(page: int, has_next: bool, is_search: bool = False):
    keyboard = []
    
    if is_search:
        # –í —Ä–µ–∂–∏–º–µ –ø–æ–∏—Å–∫–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ"
        keyboard.append([KeyboardButton(text="üîç –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–Ω–∫–µ—Ç—ã")])
    else:
        # –í –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–∏—Å–∫–∞
        keyboard.append([KeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–≤—ã–∫—É")])
    
    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    nav_buttons = []
    if page > 0:
        nav_buttons.append(KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥"))
    if has_next:
        nav_buttons.append(KeyboardButton(text="‚ñ∂Ô∏è –í–ø–µ—Ä—ë–¥"))
    
    if nav_buttons:
        keyboard.append(nav_buttons)
    
    keyboard.append([KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")])
    
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

def get_orders_reply_menu(page: int, has_next: bool):
    buttons = []
    if page > 0:
        buttons.append(KeyboardButton(text="‚óÄÔ∏è–ù–∞–∑–∞–¥"))
    if has_next:
        buttons.append(KeyboardButton(text="‚ñ∂Ô∏è–í–ø–µ—Ä—ë–¥"))
    buttons.append(KeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é"))

    return ReplyKeyboardMarkup(
        keyboard=[buttons],
        resize_keyboard=True
    )

def get_order_chat_keyboard(order_id: int):
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑")],
            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑")],
            [KeyboardButton(text="‚ö†Ô∏è –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è")],
            [KeyboardButton(text="‚¨ÖÔ∏è –í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞")]
        ],
        resize_keyboard=True
    )

def get_customer_profile_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∏–∫–Ω–µ–π–º (–∑–∞–∫–∞–∑—á–∏–∫)")],
            [KeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )

def get_executor_profile_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∏–∫–Ω–µ–π–º")],
            [KeyboardButton(text="üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É")],
            [KeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )

def get_cancel_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
        resize_keyboard=True
    )

def get_customer_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton(text="üìÑ –ê–Ω–∫–µ—Ç—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π")],
            [KeyboardButton(text="üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

def get_executor_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å (–∞–Ω–∫–µ—Ç–∞)"), KeyboardButton(text="üì¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã")],
            [KeyboardButton(text="üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

#---------------------------------------------------–°–¢–ê–†–¢---------------------------------------------------

def auto_clear(keep_last: int = 1):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    def decorator(func):
        @wraps(func)
        async def wrapper(message: types.Message, *args, **kwargs):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            current_msg_id = message.message_id
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
            response = await func(message, *args, **kwargs)
            
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫—Ä–æ–º–µ N –ø–æ—Å–ª–µ–¥–Ω–∏—Ö
            try:
                await bot(DeleteMessages(
                    chat_id=message.chat.id,
                    message_ids=list(range(current_msg_id - 50, current_msg_id - keep_last))
                ))
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∏: {e}")
            
            return response
        return wrapper
    return decorator

@dp.message(Command("start"))
@auto_clear(keep_last=0)
async def cmd_start(message: Message):
    parts = message.text.split(maxsplit=1)
    args = parts[1] if len(parts) > 1 else ""
    if args.startswith("getfile_"):
        await message.delete()

        file_code = args[len("getfile_"):]
        file_path = os.path.join("ids", f"{file_code}.json")

        if os.path.exists(file_path):
            with open(file_path, "r", encoding="utf-8") as f:
                data = json.load(f)

            file_id = data["file_id"]
            file_name = data["file_name"]

            await message.answer_document(
                document=file_id,
                caption=f"üìÑ {file_name}"
            )
        else:
            await message.answer("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —Å—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç—ë–∫.")
    else:
        # –¢–≤–æ–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        add_user(message.from_user.id, message.from_user.username)
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚úÖ –°—Ç–∞—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º")],
                [KeyboardButton(text="üõí –°—Ç–∞—Ç—å –∑–∞–∫–∞–∑—á–∏–∫–æ–º")]
            ],
            resize_keyboard=True
        )
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É ¬´–§—Ä–∏–ª–∞–Ω—Å –æ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞¬ª!\n\n"
            "–¢—ã —Ö–æ—á–µ—à—å –±—ã—Ç—å –∑–∞–∫–∞–∑—á–∏–∫–æ–º –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º?",
            reply_markup=keyboard
        )

#---------------------------------------------------–ö–û–ú–ú–ê–ù–î–´ –ê–î–ú–ò–ù–ê---------------------------------------------------

@dp.message(Command("add_admin"))
async def add_admin(message: Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not is_super_admin(message.from_user.id):
        await message.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split()
    if len(args) != 2:
        await message.answer("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_admin @username –∏–ª–∏ /add_admin 123456789")
        return
    
    identifier = args[1].strip()
    success = False
    
    try:
        if identifier.startswith('@'):
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ username
            username = identifier[1:]
            if not username:
                await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ username –ø–æ—Å–ª–µ @")
                return
                
            success = add_admin_by_username(username)
        else:
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ ID
            try:
                telegram_id = int(identifier)
                success = add_admin_by_id(telegram_id)
            except ValueError:
                await message.answer("‚ö†Ô∏è ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
                return
        
        if success:
            await message.answer(f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {identifier} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω")
        else:
            await message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {identifier}")
            
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        await message.answer(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@dp.message(Command("remove_admin"))
async def remove_admin_handler(message: Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not is_super_admin(message.from_user.id):
        await message.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split()
    if len(args) != 2:
        await message.answer("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remove_admin @username –∏–ª–∏ /remove_admin 123456789")
        return
    
    identifier = args[1].strip()
    
    try:
        if identifier.startswith('@'):
            # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ username
            result = get_user_id(identifier)
            if not result:
                await message.answer(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {identifier} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            telegram_id = result['telegram_id']
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π ID
            try:
                telegram_id = int(identifier)
            except ValueError:
                await message.answer("‚ö†Ô∏è ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
                return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è –ª–∏ —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è
        if telegram_id == message.from_user.id:
            await message.answer("‚ö†Ô∏è –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è")
            return
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ db.py
        if remove_admin(telegram_id):
            await message.answer(f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {identifier} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
        else:
            await message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {identifier}")
            
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        await message.answer(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@dp.message(Command("reports"))
async def show_reports(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    reports = get_active_reports()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    
    if not reports:
        await message.answer("‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∂–∞–ª–æ–±")
        return
    
    for report in reports:
        text = (
            f"‚ö†Ô∏è <b>–ñ–∞–ª–æ–±–∞ #{report['id']}</b>\n\n"
            f"üîπ <b>–ó–∞–∫–∞–∑:</b> #{report['order_id']}\n"
            f"üîπ <b>–û—Ç:</b> @{report['reporter_name']} (ID: {report['reporter_id']})\n"
            f"üîπ <b>–î–∞—Ç–∞:</b> {report['created_at'].strftime('%d.%m.%Y %H:%M')}\n"
            f"üîπ <b>–ü—Ä–∏—á–∏–Ω–∞:</b>\n{report['reason']}\n\n"
            f"<i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /resolve_{report['id']} –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –∫–∞–∫ —Ä–µ—à–µ–Ω–Ω–æ–π</i>"
        )
        
        await message.answer(
            text,
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="‚úÖ –†–µ—à–µ–Ω–æ",
                    callback_data=f"resolve_report_{report['id']}"
                )]
            ])
        )

async def resolve_user_id(bot: Bot, identifier: str) -> int:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ä–∞–∑–Ω—ã–º –≤—Ö–æ–¥–Ω—ã–º –¥–∞–Ω–Ω—ã–º:
    - –ß–∏—Å–ª–æ–≤–æ–π ID (12345)
    - –Æ–∑–µ—Ä–Ω–µ–π–º —Å @ (@username)
    - –Æ–∑–µ—Ä–Ω–µ–π–º –±–µ–∑ @ (username)
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID –∏–ª–∏ –≤—ã–∑—ã–≤–∞–µ—Ç ValueError.
    """
    # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω —á–∏—Å–ª–æ–≤–æ–π ID
    if identifier.isdigit():
        return int(identifier)
    
    # –£–¥–∞–ª—è–µ–º @ –≤ –Ω–∞—á–∞–ª–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
    username = identifier.lstrip('@').lower()
    
    print(identifier)

    # –ò—â–µ–º –≤ –ë–î (–≤–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è)
    db_result = get_user_id(identifier)
    telegram_id = db_result['telegram_id']
    print(db_result)
    if db_result:
        return telegram_id  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è (telegram_id,)
    
    raise ValueError(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î –∏–ª–∏ —á–∞—Ç–∞—Ö –±–æ—Ç–∞.")

@dp.message(Command("ban"))
async def ban_command(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –ù–µ—Ç –ø—Ä–∞–≤!")
        return

    args = message.text.split()
    if len(args) != 2:
        await message.answer("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ban @username –∏–ª–∏ /ban 123456789")
        return
    
    identifier = args[1].strip()

    try:
        user_id = await resolve_user_id(message.bot, identifier)
    except ValueError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return

    ban_user(user_id)
    await message.answer(f"‚úÖ –ó–∞–±–∞–Ω–µ–Ω: ID {user_id}")

@dp.message(Command("unban"))
async def unban_command(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –ù–µ—Ç –ø—Ä–∞–≤!")
        return

    args = message.text.split()
    if len(args) != 2:
        await message.answer("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unban @username –∏–ª–∏ /unban 123456789")
        return
    
    identifier = args[1].strip()

    try:
        user_id = await resolve_user_id(message.bot, identifier)
    except ValueError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return

    unban_user(user_id)
    await message.answer(f"‚úÖ –†–∞–∑–±–∞–Ω–µ–Ω: ID {user_id}")

#---------------------------------------------------–û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö---------------------------------------------------

@dp.message(lambda m: m.text == "‚öôÔ∏è –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑")
@auto_clear(keep_last=0)
async def start_creating_order(message: Message, state: FSMContext):
    await state.set_state(CreateOrder.waiting_for_title)
    cancel_kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ")]],
        resize_keyboard=True
    )
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞:",
        reply_markup=cancel_kb
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–∫–∞–∑—ã" –≤ –º–µ–Ω—é –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
@dp.message(lambda m: m.text == "üì¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã")
@auto_clear(keep_last=0)
async def show_available_orders(message: Message, state: FSMContext):
    await state.update_data(orders_page=0)
    await show_orders_page(message.from_user.id, page=0)

@dp.message(lambda m: m.text == "‚ö†Ô∏è –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è", OrderStates.active_chat)
@auto_clear(keep_last=0)
async def start_report(message: Message, state: FSMContext):
    await state.set_state(ReportStates.waiting_for_reason)
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∂–∞–ª–æ–±—ã:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]],
            resize_keyboard=True
        )
    )

@dp.message(lambda m: m.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑–∞–º")
@auto_clear(keep_last=0)
async def exit_chat(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–í—ã –≤—ã—à–ª–∏ –∏–∑ —á–∞—Ç–∞",
        reply_markup=get_customer_menu()
    )

@dp.message(lambda m: m.text == "üìÑ –ê–Ω–∫–µ—Ç—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π")
@auto_clear(keep_last=0)
async def start_browsing_executors(message: Message, state: FSMContext):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑
        data = await state.get_data()
        if 'current_order' not in data:
            await state.update_data(current_order=None)  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∑–∞–∫–∞–∑–∞
        
        await state.set_state(BrowsingExecutors.viewing)
        await state.update_data(page=0, search_term=None)
        await show_executor_page(message.from_user.id, state, 0)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∞–Ω–∫–µ—Ç: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–Ω–∫–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(lambda m: m.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑", OrderStates.active_chat)
@auto_clear(keep_last=0)
async def handle_complete_request(message: Message, state: FSMContext):
    data = await state.get_data()
    order_id = data['current_order']
    order = get_full_order_details(order_id)
    
    if not order:
        await message.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∂–∏–º–∞–ª –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç—É –∫–Ω–æ–ø–∫—É
    cursor.execute("""
        SELECT 1 FROM confirmations 
        WHERE order_id = %s AND user_id = %s AND action = 'complete'
    """, (order_id, user_id))
    if cursor.fetchone():
        await message.answer("–í—ã —É–∂–µ –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞")
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –∑–∞–ø—Ä–æ—Å–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    cursor.execute("""
        INSERT INTO confirmations (order_id, user_id, action)
        VALUES (%s, %s, 'complete')
    """, (order_id, user_id))
    conn.commit()
    
    # –ü–æ–ª—É—á–∞–µ–º ID –≤—Ç–æ—Ä–æ–π —Å—Ç–æ—Ä–æ–Ω—ã
    other_user_id = order['executor_id'] if user_id == order['customer_id'] else order['customer_id']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–∂–∏–º–∞–ª –ª–∏ –≤—Ç–æ—Ä–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–Ω–æ–ø–∫—É
    cursor.execute("""
        SELECT 1 FROM confirmations 
        WHERE order_id = %s AND user_id = %s AND action = 'complete'
    """, (order_id, other_user_id))
    other_confirmed = cursor.fetchone() is not None
    
    if other_confirmed:
        # –û–±–∞ –Ω–∞–∂–∞–ª–∏ - –∑–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–∫–∞–∑
        update_order_status(order_id, "completed")
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è—Ö
        cursor.execute("""
            DELETE FROM confirmations WHERE order_id = %s AND action = 'complete'
        """, (order_id,))
        conn.commit()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã
        await message.answer(
            "‚úÖ –ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—é —Å—Ç–æ—Ä–æ–Ω!",
            reply_markup=get_customer_menu() if user_id == order['customer_id'] else get_executor_menu()
        )
        
        await bot.send_message(
            other_user_id,
            "‚úÖ –ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—é —Å—Ç–æ—Ä–æ–Ω!",
            reply_markup=get_customer_menu() if other_user_id == order['customer_id'] else get_executor_menu()
        )
        
        await request_review(
            user_id=order['customer_id'],
            reviewed_id=order['executor_id'],
            order_id=order_id,
            target_role="–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è",
            state=state
        )

        await request_review(
            user_id=order['executor_id'],
            reviewed_id=order['customer_id'],
            order_id=order_id,
            target_role="–∑–∞–∫–∞–∑—á–∏–∫–∞",
            state=state
        )
        
        await state.clear()
    else:
        # –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –≤—Ç–æ—Ä–æ–π —Å—Ç–æ—Ä–æ–Ω—ã
        await message.answer(
            "üîÑ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –ø—Ä–∏–Ω—è—Ç. "
            "–ó–∞–∫–∞–∑ –±—É–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω, –∫–æ–≥–¥–∞ –≤—Ç–æ—Ä–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ —Ç–∞–∫–∂–µ –Ω–∞–∂–º–µ—Ç –∫–Ω–æ–ø–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.",
            reply_markup=get_order_chat_keyboard(order_id)
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Ç–æ—Ä—É—é —Å—Ç–æ—Ä–æ–Ω—É
        await bot.send_message(
            other_user_id,
            f"üîÑ –í—Ç–æ—Ä–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ –∑–∞–ø—Ä–æ—Å–∏–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ #{order_id}. "
            "–ï—Å–ª–∏ –≤—ã —Å–æ–≥–ª–∞—Å–Ω—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑'.",
            reply_markup=get_order_chat_keyboard(order_id)
        )

@dp.message(lambda m: m.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–Ω–∫–µ—Ç–∞–º")
@auto_clear(keep_last=0)
async def back_to_executors(message: Message, state: FSMContext):
    data = await state.get_data()
    await show_executor_page(
        message.from_user.id,
        state,
        data.get("page", 0),
        data.get("search_term")
    )

@dp.message(lambda m: m.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", OrderStates.active_chat)
@auto_clear(keep_last=0)
async def handle_cancel_request(message: Message, state: FSMContext):
    data = await state.get_data()
    order_id = data['current_order']
    order = get_full_order_details(order_id)
    
    if not order:
        await message.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∂–∏–º–∞–ª –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç—É –∫–Ω–æ–ø–∫—É
    cursor.execute("""
        SELECT 1 FROM confirmations 
        WHERE order_id = %s AND user_id = %s AND action = 'cancel'
    """, (order_id, user_id))
    if cursor.fetchone():
        await message.answer("–í—ã —É–∂–µ –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –æ—Ç–º–µ–Ω—É —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞")
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –∑–∞–ø—Ä–æ—Å–µ –æ—Ç–º–µ–Ω—ã
    cursor.execute("""
        INSERT INTO confirmations (order_id, user_id, action)
        VALUES (%s, %s, 'cancel')
    """, (order_id, user_id))
    conn.commit()
    
    # –ü–æ–ª—É—á–∞–µ–º ID –≤—Ç–æ—Ä–æ–π —Å—Ç–æ—Ä–æ–Ω—ã
    other_user_id = order['executor_id'] if user_id == order['customer_id'] else order['customer_id']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–∂–∏–º–∞–ª –ª–∏ –≤—Ç–æ—Ä–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–Ω–æ–ø–∫—É
    cursor.execute("""
        SELECT 1 FROM confirmations 
        WHERE order_id = %s AND user_id = %s AND action = 'cancel'
    """, (order_id, other_user_id))
    other_confirmed = cursor.fetchone() is not None
    
    if other_confirmed:
        # –û–±–∞ –Ω–∞–∂–∞–ª–∏ - –æ—Ç–º–µ–Ω—è–µ–º –∑–∞–∫–∞–∑
        update_order_status(order_id, "canceled")
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è—Ö
        cursor.execute("""
            DELETE FROM confirmations WHERE order_id = %s AND action = 'cancel'
        """, (order_id,))
        conn.commit()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã
        await message.answer(
            "‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω –ø–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—é —Å—Ç–æ—Ä–æ–Ω!",
            reply_markup=get_customer_menu() if user_id == order['customer_id'] else get_executor_menu()
        )
        
        await bot.send_message(
            other_user_id,
            "‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω –ø–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—é —Å—Ç–æ—Ä–æ–Ω!",
            reply_markup=get_customer_menu() if other_user_id == order['customer_id'] else get_executor_menu()
        )
        
        await state.clear()
    else:
        # –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –≤—Ç–æ—Ä–æ–π —Å—Ç–æ—Ä–æ–Ω—ã
        await message.answer(
            "üîÑ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–º–µ–Ω—É –∑–∞–∫–∞–∑–∞ –ø—Ä–∏–Ω—è—Ç. "
            "–ó–∞–∫–∞–∑ –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω, –∫–æ–≥–¥–∞ –≤—Ç–æ—Ä–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ —Ç–∞–∫–∂–µ –Ω–∞–∂–º–µ—Ç –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã.",
            reply_markup=get_order_chat_keyboard(order_id)
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Ç–æ—Ä—É—é —Å—Ç–æ—Ä–æ–Ω—É
        await bot.send_message(
            other_user_id,
            f"üîÑ –í—Ç–æ—Ä–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ –∑–∞–ø—Ä–æ—Å–∏–ª–∞ –æ—Ç–º–µ–Ω—É –∑–∞–∫–∞–∑–∞ #{order_id}. "
            "–ï—Å–ª–∏ –≤—ã —Å–æ–≥–ª–∞—Å–Ω—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑'.",
            reply_markup=get_order_chat_keyboard(order_id)
        )

@dp.message(lambda m: m.text == "üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
@auto_clear(keep_last=0)
async def show_my_orders(message: Message):
    user_id = message.from_user.id
    orders = get_user_orders(user_id, limit=5, offset=0)
    has_next = len(get_user_orders(user_id, limit=6, offset=5)) > 0
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    is_executor, is_customer = get_user_roles(user_id)
    
    if not orders:
        if is_executor:
            await message.answer(
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤",
                reply_markup=get_executor_menu()
            )
        else:
            await message.answer(
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤",
                reply_markup=get_back_to_menu_keyboard()
            )
        return
    
    # –†–∞–∑–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–æ–ª–µ–π
    if is_executor:
        text = (
            "üì¶ –í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n"
            "üü¢ - –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã\n"
            "üü° - –æ–∂–∏–¥–∞—é—Ç –≤–∞—à–µ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n"
            "‚úÖ - –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ\n"
            "‚ùå - –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ"
        )
    else:
        text = (
            "üì¶ –í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n"
            "üü¢ - –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã\n"
            "üü° - –æ–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n"
            "‚úÖ - –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ\n"
            "‚ùå - –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ"
        )
    
    await message.answer(
        text,
        reply_markup=get_executor_menu() if is_executor else get_back_to_menu_keyboard()
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∑–∞–∫–∞–∑–∞–º–∏
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=get_orders_keyboard(orders, page=0, has_next=has_next)
    )

# –í—ã—Ö–æ–¥ –∏–∑ —á–∞—Ç–∞
@dp.message(lambda m: m.text == "‚¨ÖÔ∏è –í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞")
@auto_clear(keep_last=0)
async def exit_chat(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    is_executor, is_customer = get_user_roles(message.from_user.id)
    
    await state.clear()
    
    if is_executor:
        await message.answer(
            "–í—ã –≤—ã—à–ª–∏ –∏–∑ —á–∞—Ç–∞",
            reply_markup=get_executor_menu()
        )
    elif is_customer:
        await message.answer(
            "–í—ã –≤—ã—à–ª–∏ –∏–∑ —á–∞—Ç–∞",
            reply_markup=get_customer_menu()
        )
    else:
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ä–æ–ª–µ–π (–º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ)
        await message.answer(
            "–í—ã –≤—ã—à–ª–∏ –∏–∑ —á–∞—Ç–∞",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –°—Ç–∞—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º")],
                    [KeyboardButton(text="üõí –°—Ç–∞—Ç—å –∑–∞–∫–∞–∑—á–∏–∫–æ–º")]
                ],
                resize_keyboard=True
            )
        )

@dp.message(lambda m: m.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∏–∫–Ω–µ–π–º")
@auto_clear(keep_last=0)
async def edit_nickname_start(message: Message, state: FSMContext):
    await state.set_state(EditProfile.nickname)
    await message.answer("üìù –í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º:", reply_markup=get_cancel_keyboard())

@dp.message(lambda m: m.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∏–∫–Ω–µ–π–º (–∑–∞–∫–∞–∑—á–∏–∫)")
@auto_clear(keep_last=0)
async def edit_customer_nickname_start(message: Message, state: FSMContext):
    await state.set_state(EditCustomerProfile.nickname)
    await message.answer("üìù –í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º:", reply_markup=get_cancel_keyboard())

@dp.message(lambda m: m.text in ["‚óÄÔ∏è –ù–∞–∑–∞–¥", "‚ñ∂Ô∏è –í–ø–µ—Ä—ë–¥", "üîç –ü–æ–∏—Å–∫", "üîç –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ", "‚¨ÖÔ∏è –í –º–µ–Ω—é"])
@auto_clear(keep_last=0)
async def handle_navigation(message: Message, state: FSMContext):
    data = await state.get_data()
    current_page = data.get("page", 0)
    search_term = data.get("search_term")
    
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        current_page -= 1
    elif message.text == "‚ñ∂Ô∏è –í–ø–µ—Ä—ë–¥":
        current_page += 1
    elif message.text == "üîç –ü–æ–∏—Å–∫":
        await message.answer("üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–≤—ã–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
        await state.update_data(waiting_for_search=True)
        return
    elif message.text == "üîç –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ":
        search_term = None
        current_page = 0
    elif message.text == "‚¨ÖÔ∏è –í –º–µ–Ω—é":
        await state.clear()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        roles = get_user_roles(message.from_user.id)
        
        if not roles:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î
            keyboard = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –°—Ç–∞—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º")],
                    [KeyboardButton(text="üõí –°—Ç–∞—Ç—å –∑–∞–∫–∞–∑—á–∏–∫–æ–º")]
                ],
                resize_keyboard=True
            )
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:", reply_markup=keyboard)
            return
            
        is_executor, is_customer = roles
        
        print(f"is_executor: {is_executor}")
        print(f"is_customer: {is_customer}")

        if is_executor:
            await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", reply_markup=get_executor_menu())
        elif is_customer:
            await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∑–∞–∫–∞–∑—á–∏–∫–∞", reply_markup=get_customer_menu())
        else:
            keyboard = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –°—Ç–∞—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º")],
                    [KeyboardButton(text="üõí –°—Ç–∞—Ç—å –∑–∞–∫–∞–∑—á–∏–∫–æ–º")]
                ],
                resize_keyboard=True
            )
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:", reply_markup=keyboard)
            
        return
    
    await show_executor_page(message.from_user.id, state, current_page, search_term)

@dp.message(lambda message: message.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å (–∞–Ω–∫–µ—Ç–∞)")
@auto_clear(keep_last=0)
async def executor_full_profile(message: Message):
    try:
        profile = get_executor_profile(message.from_user.id)
        user_id = message.from_user.id
        user_data = get_user_profile(user_id)

        if not profile:
            await message.answer(
                "–ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ —Å—Ç–∞–Ω—å—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º.",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="‚úÖ –°—Ç–∞—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º")]],
                    resize_keyboard=True
                )
            )
            return
        
        nickname, bio, skills = profile
        skills_display = ', '.join(skills.split(',')) if skills else "<i>–ù–µ —É–∫–∞–∑–∞–Ω—ã</i>"
        
        if user_data:
            username = user_data["username"] or "–ü—É—Å—Ç–æ"
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users
            rating_result = get_user_rating(user_id)
            rating = rating_result['rating'] if rating_result and rating_result['rating'] is not None else "–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫"
            
            # –ü–æ–ª—É—á–∞–µ–º 3 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—Ç–∑—ã–≤–∞
            reviews = get_user_reviews(user_id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–æ–≤
            reviews_text = "\n".join(
                [f"‚Ä¢ ¬´{review['comment']}¬ª" for review in reviews]
            ) if reviews else "–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤"
            
            await message.answer(
                f"üßë‚Äçüíº <b>–ü—Ä–æ—Ñ–∏–ª—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:</b>\n\n"
                f"üßë <b>–ù–∏–∫–Ω–µ–π–º:</b> {username}\n"
                f"üìù <b>–û —Å–µ–±–µ:</b> {bio or '<i>–ù–µ —É–∫–∞–∑–∞–Ω–æ</i>'}\n"
                f"üíº <b>–ù–∞–≤—ã–∫–∏:</b> {skills_display}\n"
                f"‚≠êÔ∏è <b>–†–µ–π—Ç–∏–Ω–≥:</b> {rating}/5\n"
                f"üí¨ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã:</b>\n{reviews_text}",
                reply_markup=get_executor_profile_keyboard(),
                parse_mode=ParseMode.HTML
            )
        else:
            await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è")

@dp.message(lambda message: message.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
@auto_clear(keep_last=0)
async def customer_profile(message: Message):
    user_id = message.from_user.id
    user_data = get_user_profile(user_id)

    if user_data:
        username = user_data["username"] or "–ü—É—Å—Ç–æ"
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users
        rating_result = get_user_rating(user_id)
        rating = rating_result['rating'] if rating_result and rating_result['rating'] is not None else "–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫"
        
        # –ü–æ–ª—É—á–∞–µ–º 3 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—Ç–∑—ã–≤–∞
        reviews = get_user_reviews(user_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–æ–≤
        reviews_text = "\n".join(
            [f"‚Ä¢ ¬´{review['comment']}¬ª" for review in reviews]
        ) if reviews else "–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤"
        
        await message.answer(
            f"üßë‚Äçüíº <b>–ü—Ä–æ—Ñ–∏–ª—å –∑–∞–∫–∞–∑—á–∏–∫–∞:</b>\n\n"
            f"üßë <b>–ù–∏–∫–Ω–µ–π–º:</b> {username}\n"
            f"‚≠êÔ∏è <b>–†–µ–π—Ç–∏–Ω–≥:</b> {rating}/5\n"
            f"üí¨ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã:</b>\n{reviews_text}",
            reply_markup=get_customer_profile_keyboard(),
            parse_mode=ParseMode.HTML
        )
    else:
        await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@dp.message(lambda message: message.text == "üõí –°—Ç–∞—Ç—å –∑–∞–∫–∞–∑—á–∏–∫–æ–º")
@auto_clear(keep_last=0)
async def set_customer(message: Message):
    set_user_roles(message.from_user.id, is_customer=True, is_executor=False)
    await message.answer("–ú–µ–Ω—é –∑–∞–∫–∞–∑—á–∏–∫–∞", reply_markup=get_customer_menu())

@dp.message(lambda message: message.text == "üîô –ù–∞–∑–∞–¥")
@auto_clear(keep_last=0)
async def back_to_role_select(message: Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úÖ –°—Ç–∞—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º")],
            [KeyboardButton(text="üõí –°—Ç–∞—Ç—å –∑–∞–∫–∞–∑—á–∏–∫–æ–º")]
        ],
        resize_keyboard=True
    )
    await message.answer("üîÑ –í—ã–±–µ—Ä–∏ —Ä–æ–ª—å:", reply_markup=keyboard)

@dp.message(lambda message: message.text == "‚úÖ –°—Ç–∞—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º")
@auto_clear(keep_last=0)
async def set_executor(message: Message):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–ª—å
        has_profile = check_profile_exists(message.from_user.id)
        set_user_roles(message.from_user.id, is_executor=True)
        
        if has_profile:
            await message.answer(
                "–ú–µ–Ω—é –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è",
                reply_markup=get_executor_menu()
            )
        else:
            if create_empty_profile(message.from_user.id):
                await message.answer(
                    "‚úÖ –í—ã —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å! –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞.\n"
                    "–ú–æ–∂–µ—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –µ—ë —á–µ—Ä–µ–∑ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è.",
                    reply_markup=get_executor_menu()
                )
            else:
                await message.answer(
                    "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=get_executor_menu()
                )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–æ–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è: {e}")
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
            reply_markup=get_executor_menu()
        )

@dp.message(lambda message: message.text == "üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É")
@auto_clear(keep_last=0)
async def edit_profile_start(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º
    is_executor = get_user_roles(message.from_user.id)
    if not is_executor:
        await message.answer(
            "–°–Ω–∞—á–∞–ª–∞ —Å—Ç–∞–Ω—å—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º!",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚úÖ –°—Ç–∞—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º")]],
                resize_keyboard=True
            )
        )
        return
    
    await state.set_state(EditProfile.bio)
    await message.answer(
        "üìù –ù–∞–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ –æ —Å–µ–±–µ:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
            resize_keyboard=True
        )
    )

@dp.message(lambda m: m.text == "‚óÄÔ∏è–ù–∞–∑–∞–¥")
@auto_clear(keep_last=0)
async def go_to_previous_page(message: Message, state: FSMContext):
    data = await state.get_data()
    current_page = data.get("orders_page", 0)
    new_page = max(current_page - 1, 0)
    await state.update_data(orders_page=new_page)
    await show_orders_page(message.from_user.id, page=new_page)

@dp.message(lambda m: m.text == "‚ñ∂Ô∏è–í–ø–µ—Ä—ë–¥")
@auto_clear(keep_last=0)
async def go_to_next_page(message: Message, state: FSMContext):
    data = await state.get_data()
    current_page = data.get("orders_page", 0)
    new_page = current_page + 1
    await state.update_data(orders_page=new_page)
    await show_orders_page(message.from_user.id, page=new_page)

#---------------------------------------------------–û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ú–ê–ù–î---------------------------------------------------

async def get_order_details(order_id: int, user_id: int):
    # –ü–æ–ª—É—á–∏–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    orders = get_user_orders(user_id, limit=50, offset=0)
    # –ù–∞–π–¥—ë–º –∑–∞–∫–∞–∑ —Å –Ω—É–∂–Ω—ã–º id
    for order in orders:
        if order['id'] == order_id:
            return order
    return None

@dp.callback_query(lambda c: c.data and c.data.startswith("details_"))
async def order_details_handler(callback: CallbackQuery):
    user_id = callback.from_user.id
    parts = callback.data.split("_")
    if len(parts) != 2:
        await callback.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data", show_alert=True)
        return

    order_id = int(parts[1])
    order = await get_order_details(order_id, user_id)

    if not order:
        await callback.answer("‚ö†Ô∏è –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    created_at_str = order['created_at']
    # –ï—Å–ª–∏ created_at - —Å—Ç—Ä–æ–∫–∞, –∫–æ–Ω–≤–µ—Ä—Ç–∏–º –≤ datetime, –µ—Å–ª–∏ —É–∂–µ datetime - –Ω–µ –Ω–∞–¥–æ
    if isinstance(created_at_str, str):
        try:
            created_at = datetime.fromisoformat(created_at_str)
        except Exception:
            created_at = created_at_str
    else:
        created_at = created_at_str

    created_at_formatted = created_at.strftime("%d.%m.%Y %H:%M") if isinstance(created_at, datetime) else str(created_at)

    executor = get_user_profile(order['executor_id']) if order.get('executor_id') else None
    customer = get_user_profile(order['customer_id']) if order.get('customer_id') else None

    executor_text = f'<a href="tg://user?id={order["executor_id"]}">{executor["username"]}</a>' if executor else "‚Äî"
    customer_text = f'<a href="tg://user?id={order["customer_id"]}">{customer["username"]}</a>' if customer else "‚Äî"

    text = (
        f"üìã <b>–ó–∞–∫–∞–∑ #{order['id']}</b>\n\n"
        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {order['title']}\n"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {order['description']}\n\n"
        f"<b>–ó–∞–∫–∞–∑—á–∏–∫:</b> {customer_text}\n"
        f"<b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> {executor_text}\n"
        f"<b>–û–ø–ª–∞—Ç–∞:</b> {order['payment_amount']} —Ä—É–±.\n"
        f"<b>–î–∞—Ç–∞:</b> {created_at_formatted}"
    )

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑—É", callback_data=f"order_{order_id}")
            ]
        ]
    )

    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")

@dp.callback_query(lambda c: c.data.startswith("respond_"))
async def handle_respond(callback: CallbackQuery):
    try:
        future_order_id = int(callback.data.split("_")[1])
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
        order_id = respond_to_future_order(future_order_id, callback.from_user.id)
        
        await callback.answer("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å –Ω–∞ –∑–∞–∫–∞–∑!", show_alert=True)
        await callback.message.answer(
            f"–í—ã –Ω–∞—á–∞–ª–∏ —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –∑–∞–∫–∞–∑–æ–º #{order_id}\n"
            "–ú–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –µ–≥–æ –≤ –º–µ–Ω—é üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã",
            reply_markup=get_executor_menu()
        )
        
    except ValueError as e:
        await callback.answer(f"‚õî {str(e)}", show_alert=True)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–∏–∫–µ: {e}")
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@dp.callback_query(lambda c: c.data.startswith(("chat_prev_", "chat_next_")))
async def navigate_chat(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    order_id = data['current_order']
    current_offset = data.get('message_offset', 3)
    
    if callback.data.startswith("chat_prev_"):
        new_offset = current_offset + 3
    else:
        new_offset = max(3, current_offset - 3)
    
    messages = get_order_messages(order_id, offset=new_offset-3, limit=3)
    
    if messages:
        chat_history = "\n".join(
            f"{'üë§ –í—ã' if msg['sender_id'] == callback.from_user.id else 'üë®‚Äçüíª –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å'}: {msg['message_text']}"
            for msg in messages
        )
        
        await state.update_data(message_offset=new_offset)
        await callback.message.edit_text(
            f"üìù –ß–∞—Ç –ø–æ –∑–∞–∫–∞–∑—É #{order_id}\n\n{chat_history}",
            reply_markup=get_active_chat_keyboard(order_id, has_older=new_offset>3)
        )

# –ü–æ–∫–∞–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∑–∞–∫–∞–∑–∞–º–∏
async def show_orders_page(user_id: int, page: int = 0):
    limit = 5
    orders = get_available_orders_paginated(limit=limit, offset=page * limit)
    has_next = len(get_available_orders_paginated(limit=1, offset=(page + 1) * limit)) > 0

    if not orders:
        return await bot.send_message(
            user_id, 
            "–°–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é")]],
                resize_keyboard=True
            )
        )

    await bot.send_message(user_id, f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}")

    for order in orders:
        if order["customer_id"] == user_id:
            continue
        await bot.send_message(
            user_id,
            f"üìå –ó–∞–∫–∞–∑ #{order['id']}\n\n"
            f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {order['title']}\n"
            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {order['description'][:100]}...\n"
            f"<b>–ù–∞–≤—ã–∫–∏:</b> {order['skills_required']}\n"
            f"<b>–û–ø–ª–∞—Ç–∞:</b> {order['payment_amount']} —Ä—É–±.\n"
            f"<b>–î–∞—Ç–∞:</b> {order['created_at'].strftime('%d.%m.%Y')}",
            reply_markup=get_orders_navigation_kb(order['id']),
            parse_mode=ParseMode.HTML
        )

    await bot.send_message(
        user_id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_orders_reply_menu(page, has_next)
    )

@dp.message(CreateOrder.waiting_for_title)
async def process_order_title(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ":
        await state.clear()
        await show_my_orders(message)
        return
    
    await state.update_data(title=message.text)
    await state.set_state(CreateOrder.waiting_for_description)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞:")

@dp.callback_query(lambda c: c.data.startswith("take_order_"))
async def take_order_handler(callback: CallbackQuery):
    order_id = int(callback.data.split("_")[2])
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑, –Ω–∞–∑–Ω–∞—á–∞—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        cursor.execute("""
            UPDATE future_orders 
            SET executor_id = %s, status = 'in_progress'
            WHERE id = %s AND status = 'waiting'
            RETURNING id
        """, (callback.from_user.id, order_id))
        
        if cursor.fetchone():
            conn.commit()
            await callback.answer("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤–∑—è–ª–∏ –∑–∞–∫–∞–∑!", show_alert=True)
            await callback.message.edit_text(
                f"–í—ã –≤–∑—è–ª–∏ –∑–∞–∫–∞–∑ #{order_id}\n"
                "–ú–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫—É:",
                reply_markup=get_order_chat_keyboard(order_id)
            )
        else:
            await callback.answer("‚ùå –ó–∞–∫–∞–∑ —É–∂–µ –∑–∞–Ω—è—Ç –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", show_alert=True)
            
    except Exception as e:
        conn.rollback()
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑—è—Ç–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@dp.callback_query(lambda c: c.data.startswith("cancel_request:"), OrderStates.confirming_cancellation)
@dp.callback_query(lambda c: c.data.startswith("cancel_request:"), OrderStates.confirming_completion)
async def cancel_confirmation_request(callback: CallbackQuery, state: FSMContext):
    confirmation_id = int(callback.data.split(":")[1])
    confirmation = get_confirmation_request(confirmation_id)
    
    if not confirmation or confirmation['status'] != 'pending':
        await callback.answer("‚ùå –ù–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å")
        return
    
    # –£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
    delete_confirmation_request(confirmation_id)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞
    await callback.message.edit_text("‚ùå –ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω")
    await callback.answer()
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Ç–æ—Ä—É—é —Å—Ç–æ—Ä–æ–Ω—É (–µ—Å–ª–∏ –µ—â–µ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª)
    order = get_full_order_details(confirmation['order_id'])
    other_user_id = order['executor_id'] if callback.from_user.id == order['customer_id'] else order['customer_id']
    await bot.send_message(
        other_user_id,
        f"‚ùå –ó–∞–ø—Ä–æ—Å –Ω–∞ {'–æ—Ç–º–µ–Ω—É' if confirmation['action'] == 'cancel' else '–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ'} "
        f"–∑–∞–∫–∞–∑–∞ #{confirmation['order_id']} –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω."
    )
    
    await state.set_state(OrderStates.active_chat)

@dp.callback_query(lambda c: c.data.startswith("msg_"))
async def create_order_with_executor(callback: CallbackQuery, state: FSMContext):
    executor_id = int(callback.data.split("_")[1])
    await state.set_state(CreateOrder.waiting_for_title)
    await state.update_data(executor_id=executor_id)
    
    cancel_kb = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ")]],
            resize_keyboard=True
        )

    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞:",
        reply_markup=cancel_kb
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith(("confirm_cancel:", "reject_cancel:")), OrderStates.confirming_cancellation)
async def handle_cancel_confirmation(callback: CallbackQuery, state: FSMContext):
    action, confirmation_id = callback.data.split(":")
    confirmation_id = int(confirmation_id)
    is_confirmed = action == "confirm_cancel"
    
    confirmation = get_confirmation_request(confirmation_id)
    if not confirmation or confirmation['status'] != 'pending':
        await callback.answer("‚ùå –≠—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    update_confirmation_request(confirmation_id, is_confirmed)
    
    if is_confirmed:
        # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–∫–∞–∑
        update_order_status(confirmation['order_id'], "canceled")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã
        order = get_full_order_details(confirmation['order_id'])
        for user_id in [order['customer_id'], order['executor_id']]:
            await bot.send_message(
                user_id,
                f"‚ùå –ó–∞–∫–∞–∑ #{confirmation['order_id']} –æ—Ç–º–µ–Ω–µ–Ω –ø–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—é —Å—Ç–æ—Ä–æ–Ω.",
                reply_markup=get_customer_menu() if user_id == order['customer_id'] else get_executor_menu()
            )
    else:
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ –æ–± –æ—Ç–∫–∞–∑–µ
        await bot.send_message(
            confirmation['initiator_id'],
            f"‚ùå –í—Ç–æ—Ä–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ –æ—Ç–∫–ª–æ–Ω–∏–ª–∞ –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–º–µ–Ω—É –∑–∞–∫–∞–∑–∞ #{confirmation['order_id']}.",
            reply_markup=get_order_chat_keyboard(confirmation['order_id'])
        )
    
    await callback.message.edit_text(
        f"‚úÖ –í—ã {'–ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏' if is_confirmed else '–æ—Ç–∫–ª–æ–Ω–∏–ª–∏'} –æ—Ç–º–µ–Ω—É –∑–∞–∫–∞–∑–∞."
    )
    await callback.answer()
    await state.set_state(OrderStates.active_chat)

@dp.callback_query(lambda c: c.data.startswith("rate:"))
async def handle_rating(callback: CallbackQuery, state: FSMContext):
    _, order_id, reviewed_id, target_role, rating = callback.data.split(":")
    reviewer_id = callback.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ ‚Äî –Ω–µ—Ç –ª–∏ —É–∂–µ –æ—Ü–µ–Ω–∫–∏
    cursor.execute("""
        SELECT 1 FROM reviews WHERE order_id = %s AND reviewer_id = %s
    """, (order_id, reviewer_id))
    if cursor.fetchone():
        await callback.answer("–í—ã —É–∂–µ –æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ç–∑—ã–≤", show_alert=True)
        return

    # –í–Ω–æ—Å–∏–º –≤ –ë–î —Ä–µ–π—Ç–∏–Ω–≥, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –±—É–¥–µ—Ç –ø–æ–∑–∂–µ
    cursor.execute("""
        INSERT INTO reviews (order_id, reviewer_id, reviewed_id, target_role, rating)
        VALUES (%s, %s, %s, %s, %s)
    """, (order_id, reviewer_id, reviewed_id, target_role, int(rating)))
    conn.commit()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await state.set_state(ReviewStates.waiting_for_comment)
    await state.update_data(order_id=order_id, reviewer_id=reviewer_id)

    await callback.message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É! –•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π? –ù–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –Ω–∏–∂–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ¬´-¬ª, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.")
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith(("orders_prev_", "orders_next_")))
async def handle_pagination(callback: CallbackQuery):
    await callback.answer()
    
    action, page = callback.data.split("_")[1:]
    page = int(page)
    user_id = callback.from_user.id
    
    # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–π offset
    if action == "prev":
        new_page = page - 1
    else:
        new_page = page + 1
    
    offset = new_page * 5
    orders = get_user_orders(user_id, limit=5, offset=offset)
    has_next = len(get_user_orders(user_id, limit=6, offset=offset+5)) > 0
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ –∑–∞–∫–∞–∑–∞–º–∏
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=get_orders_keyboard(orders, page=new_page, has_next=has_next)
    )

@dp.callback_query(lambda c: c.data == "close_window")
async def close_window(callback: CallbackQuery):
    try:
        await callback.message.delete()
    except:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å")
    finally:
        await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("delete_forder_"))
async def delete_future_order_handler(callback: CallbackQuery):
    try:
        order_id = int(callback.data.split("_")[2])
        order = get_future_order_details(order_id, callback.from_user.id)
        
        if not order:
            await callback.answer("‚õî –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        confirm_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{order_id}")],
            [InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_delete_{order_id}")]
        ])
        
        await callback.message.edit_text(
            f"‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑ #{order_id}?\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {order['title']}\n"
            f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
            reply_markup=confirm_kb
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ delete_future_order_handler: {e}")
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    finally:
        await callback.answer()

@dp.callback_query(lambda c: c.data == "back_to_orders")
async def back_to_orders(callback: CallbackQuery):
    user_id = callback.from_user.id
    orders = get_user_orders(user_id, limit=5, offset=0)
    has_next = len(get_user_orders(user_id, limit=6, offset=5)) > 0
    
    if not orders:
        await callback.message.edit_text(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="–í –º–µ–Ω—é", callback_data="main_menu")]]
            )
        )
        return
    
    await callback.message.edit_text(
        "üì¶ –í–∞—à–∏ –∑–∞–∫–∞–∑—ã:",
        reply_markup=get_orders_keyboard(orders, page=0, has_next=has_next)
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data and c.data.startswith("chat_history_"))
async def open_chat_history(callback: CallbackQuery):
    parts = callback.data.split("_")  # ['chat', 'history', '<order_id>']
    if len(parts) != 3:
        await callback.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data", show_alert=True)
        return

    order_id = int(parts[2])

    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π –ø–µ—Ä–µ–ø–∏—Å–∫–∏
    messages = get_order_messages(order_id, limit=10, offset=0)  # –¢–≤–æ—è —Ñ—É–Ω–∫—Ü–∏—è

    text = ""
    for msg in messages:
        message_text = msg["message_text"]
        sent_at = msg["sent_at"]
        sender_name = msg["sender_name"]
        text += f"<b>{sender_name}</b> ({sent_at}):\n{message_text}\n\n"


    keyboard_buttons = []

    # –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä—ë–¥", –µ—Å–ª–∏ –µ—Å—Ç—å –±–æ–ª—å—à–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
    if len(messages) == 10:
        keyboard_buttons.append(
            InlineKeyboardButton(text="‚è≠ –í–ø–µ—Ä–µ–¥", callback_data=f"chat_page_{order_id}_2")
        )

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑—É"
    keyboard_buttons.append(
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑—É", callback_data=f"order_{order_id}")
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[keyboard_buttons])

    await callback.message.edit_text(
        f"<b>–ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ 1):</b>\n\n{text}",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@dp.callback_query(lambda c: c.data and c.data.startswith("chat_page_"))
async def paginate_chat(callback: CallbackQuery):
    parts = callback.data.split("_")  # ['chat', 'page', '<order_id>', '<page>']
    if len(parts) != 4:
        await callback.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data", show_alert=True)
        return

    order_id = int(parts[2])
    page = int(parts[3])

    offset = (page - 1) * 10
    messages = get_order_messages(order_id, limit=10, offset=offset)

    if not messages:
        await callback.answer("‚ö†Ô∏è –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ", show_alert=True)
        return

    text = ""
    for msg in messages:
        message_text = msg["message_text"]
        sent_at = msg["sent_at"]
        sender_name = msg["sender_name"]
        text += f"<b>{sender_name}</b> ({sent_at}):\n{message_text}\n\n"


    keyboard_buttons = []

    if page > 1:
        keyboard_buttons.append(
            InlineKeyboardButton(text="‚èÆ –ù–∞–∑–∞–¥", callback_data=f"chat_page_{order_id}_{page-1}")
        )
    if len(messages) == 10:
        keyboard_buttons.append(
            InlineKeyboardButton(text="‚è≠ –í–ø–µ—Ä–µ–¥", callback_data=f"chat_page_{order_id}_{page+1}")
        )

    keyboard_buttons.append(
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑—É", callback_data=f"order_{order_id}")
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[keyboard_buttons])

    await callback.message.edit_text(
        f"<b>–ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}):</b>\n\n{text}",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@dp.callback_query(lambda c: c.data.startswith("chat_"))
async def open_chat_handler(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split("_")[1])
    order = get_full_order_details(order_id)
    
    if not order or order['status'] != 'active':
        await callback.answer("–ß–∞—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤", show_alert=True)
        return
    
    user_id = callback.from_user.id
    
    await state.update_data(
        current_order=order_id,
        executor_id=order['executor_id'] if user_id == order['customer_id'] else order['customer_id']
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    cursor.execute("""
        SELECT 1 FROM confirmations 
        WHERE order_id = %s AND user_id = %s AND action = 'complete'
    """, (order_id, user_id))
    user_requested = cursor.fetchone() is not None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∞ –ª–∏ –≤—Ç–æ—Ä–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    other_user_id = order['executor_id'] if user_id == order['customer_id'] else order['customer_id']
    cursor.execute("""
        SELECT 1 FROM confirmations 
        WHERE order_id = %s AND user_id = %s AND action = 'complete'
    """, (order_id, other_user_id))
    other_requested = cursor.fetchone() is not None
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
    status_msg = ""
    if user_requested and other_requested:
        status_msg = "‚úÖ –û–±–µ —Å—Ç–æ—Ä–æ–Ω—ã —Å–æ–≥–ª–∞—Å–Ω—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑. –ó–∞–∫–∞–∑ –±—É–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω."
    elif user_requested:
        status_msg = "üîÑ –í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞. –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –≤—Ç–æ—Ä–æ–π —Å—Ç–æ—Ä–æ–Ω—ã."
    elif other_requested:
        status_msg = "üîÑ –í—Ç–æ—Ä–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ –∑–∞–ø—Ä–æ—Å–∏–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞. –ï—Å–ª–∏ —Å–æ–≥–ª–∞—Å–Ω—ã, –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑'."
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
    messages = get_order_messages(order_id, limit=10)
    
    if messages:
        history_text = "üìú –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏:\n\n"
        for msg in messages:
            sender = "üë§ –í—ã" if msg['sender_id'] == user_id else f"üë®‚Äçüíª {msg['sender_name']}"
            time_str = msg['sent_at'].strftime('%d.%m %H:%M') if isinstance(msg['sent_at'], datetime) else "--:-- --.--"
            history_text += f"{sender} ({time_str}):\n{msg['message_text']}\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        
        if status_msg:
            history_text = f"{status_msg}\n\n{history_text}"
        
        await callback.message.answer(
            history_text,
            reply_markup=get_order_chat_keyboard(order_id)
        )
    else:
        if status_msg:
            await callback.message.answer(
                status_msg,
                reply_markup=get_order_chat_keyboard(order_id)
            )
        else:
            await callback.message.answer(
                "üì≠ –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –ø—É—Å—Ç–∞",
                reply_markup=get_order_chat_keyboard(order_id)
            )
    
    await state.set_state(OrderStates.active_chat)
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("delete_forder_"))
async def delete_future_order_handler(callback: CallbackQuery):
    try:
        order_id = int(callback.data.split("_")[2])
        order = get_future_order_details(order_id, callback.from_user.id)
        
        if not order:
            await callback.answer("‚õî –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        confirm_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{order_id}")],
            [InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_delete_{order_id}")]
        ])
        
        await callback.message.edit_text(
            f"‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑ #{order_id}?\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {order['title']}\n"
            f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
            reply_markup=confirm_kb
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ delete_future_order_handler: {e}")
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    finally:
        await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("confirm_delete_"))
async def confirm_delete_order(callback: CallbackQuery):
    try:
        order_id = int(callback.data.split("_")[2])
        
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ db.py
        success = delete_future_order(order_id, callback.from_user.id)
        
        if success:
            await callback.message.edit_text(f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
        else:
            await callback.message.edit_text("‚õî –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ confirm_delete_order: {e}")
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    finally:
        await callback.answer()

def get_confirmation_keyboard(order_id: int):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"confirm_delete_{order_id}")],
        [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data=f"cancel_delete_{order_id}")]
    ])

@dp.callback_query(lambda c: c.data.startswith("cancel_delete_"))
async def cancel_delete_order(callback: CallbackQuery):
    try:
        order_id = int(callback.data.split("_")[2])
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∑–∞–∫–∞–∑–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º callback_data
        await callback.message.edit_text(
            f"‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—Ç –∫ –∑–∞–∫–∞–∑—É #{order_id}.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞–∫–∞–∑—É", callback_data=f"order_{order_id}_future_order")]
            ])
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —É–¥–∞–ª–µ–Ω–∏—è")
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏–∑ —á–∞—Ç–∞
@dp.callback_query(lambda c: c.data.startswith("confirm:"))
async def confirm_order_handler(callback: CallbackQuery, state: FSMContext):
    confirmation_id = int(callback.data.split(":")[1])
    updated = update_confirmation(confirmation_id, False, True)
    
    if not updated:
        await callback.answer("–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
        return
    
    confirmation = get_confirmation_status(confirmation_id)
    if confirmation['customer_confirmed'] and confirmation['executor_confirmed']:
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        order_id = create_order(
            customer_id=confirmation['customer_id'],
            executor_id=confirmation['executor_id']
        )
        
        if order_id:
            await callback.message.edit_text(f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} —Å–æ–∑–¥–∞–Ω!")
            await bot.send_message(
                confirmation['customer_id'],
                f"‚úÖ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∑–∞–∫–∞–∑ #{order_id}"
            )
        else:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞")
    else:
        await callback.answer("‚úÖ –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –∑–∞–∫–∞–∑. –û–∂–∏–¥–∞–µ–º –∑–∞–∫–∞–∑—á–∏–∫–∞.")

@dp.callback_query(lambda c: c.data.startswith("edit_forder_"))
async def edit_future_order_start(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split("_")[2])
    order = get_future_order_details(order_id, callback.from_user.id)
    
    if not order:
        await callback.answer("‚õî –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    await state.update_data(order_id=order_id, current_order=order)
    await state.set_state(EditFutureOrder.waiting_title)
    
    await callback.message.answer(
        f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ #{order_id}\n"
        f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {order['title']}\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")]],
            resize_keyboard=True
        )
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("cancel_"), OrderCreationStates.confirming)
async def process_cancellation(callback: CallbackQuery, state: FSMContext):
    confirmation_id = callback.data.split("_")[1]
    data = await state.get_data()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ confirmation_id
    if data.get('confirmation_id') != confirmation_id:
        await callback.answer("–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ")
        return
    
    user_id = callback.from_user.id
    other_user_id = data['executor_id'] if user_id == callback.message.chat.id else callback.message.chat.id
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ—Ç–º–µ–Ω–µ
    await callback.message.edit_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await bot.send_message(other_user_id, "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ –¥—Ä—É–≥–æ–π —Å—Ç–æ—Ä–æ–Ω–æ–π")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

@dp.callback_query(OrderCreationStates.confirming, lambda c: c.data == "cancel_order_creation")
async def cancel_order_creation(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await state.clear()

# 4. –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
@dp.callback_query(lambda c: c.data.startswith(("orders_prev_", "orders_next_")))
async def paginate_orders(callback: CallbackQuery):
    action, page = callback.data.split("_")[1:]
    page = int(page)
    user_id = callback.from_user.id
    
    if action == "prev":
        page -= 1
        offset = max(0, page * 5)
    else:
        page += 1
        offset = page * 5
    
    orders = get_user_orders(user_id, limit=5, offset=offset)
    has_next = len(get_user_orders(user_id, limit=6, offset=offset+5)) > 0
    
    await callback.message.edit_reply_markup(
        reply_markup=get_orders_keyboard(orders, page=page, has_next=has_next)
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("order_"))
async def handle_order_view(callback: CallbackQuery):
    parts = callback.data.split('_')
    order_id = int(parts[1])
    order_type = parts[2] if len(parts) > 2 else 'order'
    user_id = callback.from_user.id

    print(order_type)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
    if order_type == 'pending':
        print(order_id)
        order = get_future_order_details(order_id, user_id)
        print(order)
        if not order:
            await callback.answer("‚õî –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
            
        text = (
            f"üü° –ó–∞–∫–∞–∑ #{order_id} (–æ–∂–∏–¥–∞–µ—Ç –≤–∞—à–µ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)\n\n"
            f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {order['title']}\n"
            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {order['description']}\n"
            f"<b>–ù–∞–≤—ã–∫–∏:</b> {order['skills_required']}\n"
            f"<b>–û–ø–ª–∞—Ç–∞:</b> {order['payment_amount']} —Ä—É–±.\n"
            f"<b>–°–æ–∑–¥–∞–Ω:</b> {order['created_at'].strftime('%d.%m.%Y %H:%M')}"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑", callback_data=f"accept_order_{order_id}"),
             InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_order_{order_id}")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_orders")]
        ])
    
    elif order_type == 'available':
        order = get_future_order_details(order_id)
        if not order:
            await callback.answer("‚õî –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∑–∞–Ω—è—Ç", show_alert=True)
            return
            
        text = (
            f"üü° –î–æ—Å—Ç—É–ø–Ω—ã–π –∑–∞–∫–∞–∑ #{order_id}\n\n"
            f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {order['title']}\n"
            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {order['description']}\n"
            f"<b>–ù–∞–≤—ã–∫–∏:</b> {order['skills_required']}\n"
            f"<b>–û–ø–ª–∞—Ç–∞:</b> {order['payment_amount']} —Ä—É–±.\n"
            f"<b>–°–æ–∑–¥–∞–Ω:</b> {order['created_at'].strftime('%d.%m.%Y %H:%M')}"
        )
        
        if order.get("customer_id") == user_id:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –∑–∞–∫–∞–∑—á–∏–∫
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚öôÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑", callback_data=f"edit_forder_{order_id}")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_orders")]
            ])
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üì® –í–∑—è—Ç—å –∑–∞–∫–∞–∑", callback_data=f"take_order_{order_id}")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_orders")]
            ])

    else:  # –û–±—ã—á–Ω—ã–π –∑–∞–∫–∞–∑
        order = get_full_order_details(order_id)
        if not order:
            await callback.answer("‚õî –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
            
        status_icon = "üü¢" if order['status'] == 'active' else "‚úÖ" if order['status'] == 'completed' else "‚ùå" if order['status'] == 'canceled' else "üü°"
        text = (
            f"{status_icon} –ó–∞–∫–∞–∑ #{order_id}\n\n"
            f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {order['title']}\n"
            f"<b>–°—Ç–∞—Ç—É—Å:</b> {order['status']}\n"
            f"<b>–ó–∞–∫–∞–∑—á–∏–∫:</b> {order['customer_username']}\n"
            f"<b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> {order['executor_username'] or '–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}\n"
            f"<b>–°–æ–∑–¥–∞–Ω:</b> {order['created_at'].strftime('%d.%m.%Y %H:%M')}"
        )
        
        keyboard = get_order_keyboard(order)
    
    try:
        await callback.message.edit_text(
            text,
            reply_markup=keyboard,
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞")

@dp.callback_query(lambda c: c.data.startswith(("confirm_order:", "cancel_order:")), OrderCreationStates.confirming)
async def handle_confirmation(callback: CallbackQuery, state: FSMContext):
    print(f"\n=== –ù–û–í–´–ô CALLBACK ===")
    print(f"–î–∞–Ω–Ω—ã–µ callback: {callback.data}")
    print(f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {callback.from_user.id}")
    
    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data
        action, confirmation_id = callback.data.split(":")
        confirmation_id = int(confirmation_id)
        is_confirmed = action == "confirm_order"
        
        print(f"–î–µ–π—Å—Ç–≤–∏–µ: {'–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ' if is_confirmed else '–æ—Ç–º–µ–Ω–∞'}")
        print(f"ID –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {confirmation_id}")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∏–∑ –ë–î
        confirmation = get_confirmation_status(confirmation_id)
        print(f"–î–∞–Ω–Ω—ã–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑ –ë–î: {confirmation}")
        
        if not confirmation:
            print("‚ùå –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î")
            await callback.answer("‚ùå –°–µ—Å—Å–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç (–∑–∞–∫–∞–∑—á–∏–∫ –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å)
        is_customer = callback.from_user.id == confirmation['customer_id']
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è {'–∑–∞–∫–∞–∑—á–∏–∫–æ–º' if is_customer else '–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º'}")
        
        if not is_customer and callback.from_user.id != confirmation['executor_id']:
            print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∑–∞–∫–∞–∑–∞")
            await callback.answer("‚ùå –í—ã –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞", show_alert=True)
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ –ë–î
        update_success = update_confirmation(confirmation_id, is_customer, is_confirmed)
        print(f"–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {'—É—Å–ø–µ—à–Ω–æ' if update_success else '–æ—à–∏–±–∫–∞'}")
        
        if not update_success:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞", show_alert=True)
            return
        
        # –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–º–µ–Ω–∞ - —É–≤–µ–¥–æ–º–ª—è–µ–º –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º
        if not is_confirmed:
            print("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
            await callback.message.edit_text("‚ùå –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            await notify_other_side(
                confirmation, 
                is_customer,
                "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ –¥—Ä—É–≥–æ–π —Å—Ç–æ—Ä–æ–Ω–æ–π"
            )
            await state.clear()
            return
        
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        current_status = get_confirmation_status(confirmation_id)
        print(f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {current_status}")
        
        # –ï—Å–ª–∏ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏
        if current_status['customer_confirmed'] and current_status['executor_confirmed']:
            print("–û–±–µ —Å—Ç–æ—Ä–æ–Ω—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ - —Å–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑")
            # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
            order_id = create_order(
                customer_id=confirmation['customer_id'],
                executor_id=confirmation['executor_id']
            )
            
            print(f"–°–æ–∑–¥–∞–Ω –∑–∞–∫–∞–∑ —Å ID: {order_id}")
            
            if order_id:
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã
                await callback.message.edit_text(f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
                await notify_other_side(
                    confirmation,
                    is_customer,
                    f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} —Å–æ–∑–¥–∞–Ω!",
                    get_customer_menu() if is_customer else get_executor_menu()
                )
            else:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞")
                await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞")
            
            await state.clear()
        else:
            print("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–æ–π")
            await callback.answer(
                "‚úÖ –í–∞—à–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ. –û–∂–∏–¥–∞–µ–º –≤—Ç–æ—Ä—É—é —Å—Ç–æ—Ä–æ–Ω—É.",
                show_alert=True
            )
            
    except Exception as e:
        print(f"!!! –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {str(e)}")
        logging.exception("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@dp.callback_query(lambda c: c.data.startswith("close_history_"))
async def close_history(callback: CallbackQuery):
    try:
        await callback.message.delete()
        await callback.answer()
    except:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å")

async def notify_admins_about_report(report_id: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ –Ω–æ–≤–æ–π –∂–∞–ª–æ–±–µ"""
    report = get_report_details(report_id)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ db.py
    if not report:
        return
    
    admins = get_active_admins()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ db.py
    
    for admin in admins:
        try:
            await bot.send_message(
                admin['telegram_id'],
                f"‚ö†Ô∏è –ù–æ–≤–∞—è –∂–∞–ª–æ–±–∞ #{report_id}\n\n"
                f"–ó–∞–∫–∞–∑: #{report['order_id']}\n"
                f"–û—Ç: @{report['reporter_name']}\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: {report['reason']}",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(
                        text="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å",
                        callback_data=f"view_report_{report_id}"
                    )]
                ])
            )
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {admin['telegram_id']}: {e}")

@dp.callback_query(lambda c: c.data.startswith("resolve_report_"))
async def resolve_report_handler(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    report_id = int(callback.data.split("_")[2])
    
    # –£–¥–∞–ª—è–µ–º –∂–∞–ª–æ–±—É
    if resolve_and_delete_report(report_id):
        try:
            await callback.message.edit_text(
                f"‚úÖ –ñ–∞–ª–æ–±–∞ #{report_id} —É–¥–∞–ª–µ–Ω–∞",
                parse_mode=ParseMode.HTML
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await callback.answer("–ñ–∞–ª–æ–±–∞ —É–¥–∞–ª–µ–Ω–∞")
    else:
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∂–∞–ª–æ–±—ã", show_alert=True)
    
    await callback.answer()


@dp.callback_query(lambda c: c.data.startswith("info_"))
async def show_executor_info(callback: CallbackQuery):
    executor_id = int(callback.data.split("_")[1])
    profile = get_executor_profile(executor_id)
    
    if profile:
        nickname, bio, skills = profile
        await callback.message.answer(
            f"‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ:</b>\n\n"
            f"üßë –ù–∏–∫–Ω–µ–π–º: {nickname or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üìù –û —Å–µ–±–µ: {bio or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"üíº –ù–∞–≤—ã–∫–∏: {skills or '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}\n"
            f"üÜî ID: {executor_id}"
        )

@dp.callback_query(lambda c: c.data.startswith("reject_order_"))
async def reject_order_handler(callback: CallbackQuery):
    order_id = int(callback.data.split("_")[2])
    
    try:
        # –û—Ç–∫–ª–æ–Ω—è–µ–º –∑–∞–∫–∞–∑
        cursor.execute("""
            UPDATE future_orders 
            SET status = 'rejected'
            WHERE id = %s AND executor_id = %s AND status = 'waiting'
            RETURNING customer_id
        """, (order_id, callback.from_user.id))
        
        result = cursor.fetchone()
        
        if result:
            conn.commit()
            await callback.message.edit_text(
                "‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞–∫–∞–∑",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_orders")]
                ])
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞–∫–∞–∑—á–∏–∫–∞
            await bot.send_message(
                result['customer_id'],
                f"‚ùå –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–∞—à –∑–∞–∫–∞–∑ #{order_id}.\n"
                "–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.",
                reply_markup=get_customer_menu()
            )
        else:
            await callback.answer("‚ùå –ó–∞–∫–∞–∑ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", show_alert=True)
            
    except Exception as e:
        conn.rollback()
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@dp.callback_query(lambda c: c.data.startswith("reject_order_"))
async def reject_order_handler(callback: CallbackQuery):
    order_id = int(callback.data.split("_")[2])
    
    try:
        # –û—Ç–∫–ª–æ–Ω—è–µ–º –∑–∞–∫–∞–∑
        cursor.execute("""
            UPDATE future_orders 
            SET status = 'rejected'
            WHERE id = %s AND executor_id = %s AND status = 'waiting'
            RETURNING customer_id
        """, (order_id, callback.from_user.id))
        
        result = cursor.fetchone()
        
        if result:
            conn.commit()
            await callback.message.edit_text("‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞–∫–∞–∑")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞–∫–∞–∑—á–∏–∫–∞
            await bot.send_message(
                result['customer_id'],
                f"‚ùå –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–∞—à –∑–∞–∫–∞–∑ #{order_id}.\n"
                "–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è."
            )
        else:
            await callback.answer("‚ùå –ó–∞–∫–∞–∑ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", show_alert=True)
            
    except Exception as e:
        conn.rollback()
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@dp.callback_query(lambda c: c.data.startswith("accept_order_"))
async def accept_order_handler(callback: CallbackQuery):
    order_id = int(callback.data.split("_")[2])
    try:
        print(order_id)
        print(callback.from_user.id)
        # –ü—Ä–∏–Ω–∏–º–∞–µ–º –∑–∞–∫–∞–∑ - —Å–æ–∑–¥–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑
        cursor.execute("""
            WITH fo AS (
                SELECT * FROM future_orders 
                WHERE id = %s AND executor_id = %s AND status = 'pending_executor'
                FOR UPDATE
            )
            INSERT INTO orders (customer_id, executor_id, status, title, description, skills_required, payment_amount)
            SELECT customer_id, executor_id, 'active', title, description, skills_required, payment_amount
            FROM fo
            RETURNING id, customer_id
        """, (order_id, callback.from_user.id))
        
        result = cursor.fetchone()
        print(result)
        
        if result:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å future_order
            cursor.execute("""
                UPDATE future_orders 
                SET status = 'accepted'
                WHERE id = %s
            """, (order_id,))
            
            conn.commit()
            
            await callback.message.edit_text(
                f"‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–∫–∞–∑ #{result['id']}\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üí¨ –ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç", callback_data=f"chat_{result['id']}")]
                ])
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞–∫–∞–∑—á–∏–∫–∞
            await bot.send_message(
                result['customer_id'],
                f"‚úÖ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø—Ä–∏–Ω—è–ª –≤–∞—à –∑–∞–∫–∞–∑ #{result['id']}!\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è –≤ —á–∞—Ç–µ.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üí¨ –ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç", callback_data=f"chat_{result['id']}")]
                ])
            )
        else:
            await callback.answer("‚ùå –ó–∞–∫–∞–∑ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", show_alert=True)      
    except Exception as e:
        conn.rollback()
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

#---------------------------------------------------–û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–õ–ê–°–°–û–í---------------------------------------------------

@dp.message(CreateOrder.waiting_for_description)
async def process_order_description(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ":
        await state.clear()
        await show_my_orders(message)
        return
    
    await state.update_data(description=message.text)
    await state.set_state(CreateOrder.waiting_for_skills)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ–±—É–µ–º—ã–µ –Ω–∞–≤—ã–∫–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):")

@dp.message(CreateOrder.waiting_for_skills)
async def process_order_skills(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ":
        await state.clear()
        await show_my_orders(message)
        return
    
    await state.update_data(skills=message.text)
    await state.set_state(CreateOrder.waiting_for_payment)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã (–≤ —Ä—É–±–ª—è—Ö):")

@dp.message(CreateOrder.waiting_for_payment)
async def process_order_payment(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ":
        await state.clear()
        await show_my_orders(message)
        return
    
    try:
        payment = float(message.text)
        if payment <= 0:
            await message.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É:")
            return
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1500):")
        return
    
    data = await state.get_data()
    
    try:
        order_id = create_future_order(
            customer_id=message.from_user.id,
            title=data['title'],
            description=data['description'],
            skills=data['skills'],
            payment=payment,
            executor_id=data.get('executor_id')  # –ë—É–¥–µ—Ç None, –µ—Å–ª–∏ –∑–∞–∫–∞–∑ –ø—É–±–ª–∏—á–Ω—ã–π
        )
        
        await state.clear()
        
        if data.get('executor_id'):
            await message.answer(
                f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ!\n\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {data['title']}\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}\n"
                f"–ù–∞–≤—ã–∫–∏: {data['skills']}\n"
                f"–û–ø–ª–∞—Ç–∞: {payment} —Ä—É–±.",
                reply_markup=get_customer_menu()
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
            await bot.send_message(
                data['executor_id'],
                f"üì® –í–∞–º –ø–æ—Å—Ç—É–ø–∏–ª –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id}\n\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {data['title']}\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}\n"
                f"–ù–∞–≤—ã–∫–∏: {data['skills']}\n"
                f"–û–ø–ª–∞—Ç–∞: {payment} —Ä—É–±.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑", callback_data=f"accept_order_{order_id}"),
                     InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_order_{order_id}")]
                ])
            )
        else:
            await message.answer(
                f"‚úÖ –ü—É–±–ª–∏—á–Ω—ã–π –∑–∞–∫–∞–∑ #{order_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {data['title']}\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}\n"
                f"–ù–∞–≤—ã–∫–∏: {data['skills']}\n"
                f"–û–ø–ª–∞—Ç–∞: {payment} —Ä—É–±.",
                reply_markup=get_customer_menu()
            )
            
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞")
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ –ø–æ–∑–∂–µ.",
            reply_markup=get_customer_menu()
        )
        await state.clear()

@dp.message(ReportStates.waiting_for_reason)
async def process_report_reason(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await state.set_state(OrderStates.active_chat)
        data = await state.get_data()
        await message.answer(
            "–°–æ–∑–¥–∞–Ω–∏–µ –∂–∞–ª–æ–±—ã –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=get_order_chat_keyboard(data['current_order'])
        )
        return
    
    data = await state.get_data()
    order_id = data['current_order']
    
    report_id = create_report(order_id, message.from_user.id, message.text)
    if report_id:
        asyncio.create_task(notify_admins_about_report(report_id))
        await message.answer(
            "‚úÖ –ñ–∞–ª–æ–±–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!",
            reply_markup=get_order_chat_keyboard(order_id)
        )
    else:
        await message.answer(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_order_chat_keyboard(order_id)
        )
    
    await state.set_state(OrderStates.active_chat)

@dp.message(EditCustomerProfile.nickname)
async def process_customer_nickname(message: Message, state: FSMContext):
    text = message.text.strip()

    if text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_customer_menu())
        return

    if not text or text.startswith("/"):
        await message.answer("‚ùå –ù–∏–∫–Ω–µ–π–º –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—É.")
        return

    update_nickname(message.from_user.id, text)
    await state.clear()
    await message.answer("‚úÖ –ù–∏–∫–Ω–µ–π–º –æ–±–Ω–æ–≤–ª–µ–Ω!", reply_markup=get_customer_menu())

@dp.message(EditProfile.nickname)
async def process_nickname(message: Message, state: FSMContext):
    if message.text.strip() == "" or message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_executor_menu())
        return
    update_nickname(message.from_user.id, message.text.strip())
    await state.clear()
    await message.answer("‚úÖ –ù–∏–∫–Ω–µ–π–º –æ–±–Ω–æ–≤–ª–µ–Ω!", reply_markup=get_executor_menu())

@dp.message(EditProfile.bio)
async def process_bio(message: Message, state: FSMContext):
    if message.text.strip() == "" or message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_executor_menu())
        return
    await state.update_data(bio=message.text.strip())
    await state.set_state(EditProfile.skills)
    await message.answer("üíº –£–∫–∞–∂–∏ —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):", reply_markup=get_cancel_keyboard())

@dp.message(EditProfile.skills)
async def process_skills(message: Message, state: FSMContext):
    if message.text.strip() == "" or message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_executor_menu())
        return
    data = await state.get_data()
    update_bio(message.from_user.id, data.get("bio", ""))
    update_skills(message.from_user.id, message.text.strip())
    await state.clear()
    await message.answer("‚úÖ –ê–Ω–∫–µ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!", reply_markup=get_executor_menu())

def format_messages(messages: list, current_user_id: int):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    result = []
    for msg in messages:
        sender = "üë§ –í—ã" if msg['sender_id'] == current_user_id else f"üë®‚Äçüíª {msg.get('sender_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')}"
        time = msg['sent_at'].strftime("%H:%M %d.%m")
        result.append(f"{sender} ({time}):\n{msg['message_text']}\n")
    return "\n".join(result)

async def show_executor_page(user_id: int, state: FSMContext, page: int, search_term: str = None):
    data = await state.get_data()
    limit = 5
    
    if search_term:
        profiles = search_executor_profiles(search_term, limit=limit, offset=page*limit)
    else:
        profiles = get_executor_profiles_paginated(limit=limit, offset=page*limit)
    
    if not profiles:
        text = "‚ùå –ê–Ω–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–æ." if search_term else "‚ùå –ù–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∞–Ω–∫–µ—Ç –Ω–µ—Ç."
        await bot.send_message(user_id, text, reply_markup=get_customer_menu())
        await state.clear()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    next_page_profiles = get_executor_profiles_paginated(limit=limit, offset=(page+1)*limit) if not search_term else \
                        search_executor_profiles(search_term, limit=limit, offset=(page+1)*limit)
    has_next = bool(next_page_profiles)
    
    await state.update_data(page=page, has_next=has_next, search_term=search_term)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ (Reply)
    await bot.send_message(
        user_id,
        f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}",
        reply_markup=get_executor_navigation_kb(page, has_next, bool(search_term))
        )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∫–µ—Ç—ã —Å Inline-–∫–Ω–æ–ø–∫–∞–º–∏
    for profile in profiles:
        username = profile.get("username") or "<i>–ü—É—Å—Ç–æ</i>"
        bio = profile.get("bio") or "<i>–ü—É—Å—Ç–æ</i>"
        skills = ', '.join(profile.get("skills", "").split(',')) if profile.get("skills") else "<i>–ü—É—Å—Ç–æ</i>"
        rating = profile.get("rating") or "‚Äî"
        executor_id = profile.get("telegram_id")

        # –ü–æ–ª—É—á–∞–µ–º 3 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—Ç–∑—ã–≤–∞
        reviews = get_user_reviews(profile.get("telegram_id"))
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–æ–≤
        reviews_text = "\n".join(
            [f"‚Ä¢ ¬´{review['comment']}¬ª" for review in reviews]
        ) if reviews else "–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤"

        await bot.send_message(
            user_id,
            f"üßë <b>–ù–∏–∫–Ω–µ–π–º:</b> {username}\n"
            f"üìù <b>–û —Å–µ–±–µ:</b> {bio}\n"
            f"üíº <b>–ù–∞–≤—ã–∫–∏:</b> {skills}\n"
            f"‚≠êÔ∏è <b>–†–µ–π—Ç–∏–Ω–≥:</b> {rating}/5\n"
            f"üí¨ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã:</b>\n{reviews_text}",
            reply_markup=get_executor_inline_kb(executor_id)  # Inline-–∫–Ω–æ–ø–∫–∏ –∑–¥–µ—Å—å
        )

async def notify_other_side(confirmation, is_customer, message, reply_markup=None):
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –¥—Ä—É–≥—É—é —Å—Ç–æ—Ä–æ–Ω—É –æ –¥–µ–π—Å—Ç–≤–∏–∏"""
    other_user_id = confirmation['executor_id'] if is_customer else confirmation['customer_id']
    print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {other_user_id}: {message}")
    
    try:
        await bot.send_message(
            chat_id=other_user_id,
            text=message,
            reply_markup=reply_markup
        )
        print("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(e)}")
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {other_user_id}: {e}")


@dp.message(EditFutureOrder.waiting_title)
async def process_edit_title(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ":
        await state.clear()
        await message.answer("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_customer_menu())
        return
    
    data = await state.get_data()
    new_title = message.text if message.text != "-" else data['current_order']['title']
    
    await state.update_data(new_title=new_title)
    await state.set_state(EditFutureOrder.waiting_description)
    
    await message.answer(
        f"–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {data['current_order']['description']}\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ:"
    )

@dp.message(EditFutureOrder.waiting_description)
async def process_edit_description(message: Message, state: FSMContext):
    data = await state.get_data()
    new_description = message.text if message.text != "-" else data['current_order']['description']
    
    await state.update_data(new_description=new_description)
    await state.set_state(EditFutureOrder.waiting_skills)
    
    await message.answer(
        f"–¢–µ–∫—É—â–∏–µ –Ω–∞–≤—ã–∫–∏: {data['current_order']['skills_required']}\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–µ:"
    )

@dp.message(EditFutureOrder.waiting_skills)
async def process_edit_skills(message: Message, state: FSMContext):
    data = await state.get_data()
    new_skills = message.text if message.text != "-" else data['current_order']['skills_required']
    
    await state.update_data(new_skills=new_skills)
    await state.set_state(EditFutureOrder.waiting_payment)
    
    await message.answer(
        f"–¢–µ–∫—É—â–∞—è –æ–ø–ª–∞—Ç–∞: {data['current_order']['payment_amount']} —Ä—É–±.\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é:"
    )

@dp.message(EditFutureOrder.waiting_payment)
async def process_edit_payment(message: Message, state: FSMContext):
    data = await state.get_data()
    
    try:
        if message.text == "-":
            new_payment = data['current_order']['payment_amount']
        else:
            new_payment = float(message.text)
            if new_payment <= 0:
                await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É:")
                return
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1500):")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é –≤ db.py
    success = update_future_order(
        order_id=data['order_id'],
        customer_id=message.from_user.id,
        title=data['new_title'],
        description=data['new_description'],
        skills=data['new_skills'],
        payment=new_payment
    )
    
    await state.clear()
    if success:
        await message.answer(
            f"‚úÖ –ó–∞–∫–∞–∑ #{data['order_id']} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!",
            reply_markup=get_customer_menu()
        )
    else:
        await message.answer(
            "‚õî –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–∫–∞–∑",
            reply_markup=get_customer_menu()
        )

async def request_review(user_id: int, reviewed_id: int, order_id: int, target_role: str, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ –æ—Å—Ç–∞–≤–∏–ª –ª–∏ —É–∂–µ –æ—Ç–∑—ã–≤
    cursor.execute("""
        SELECT 1 FROM reviews WHERE order_id = %s AND reviewer_id = %s
    """, (order_id, user_id))
    if cursor.fetchone():
        return  # –£–∂–µ –æ—Å—Ç–∞–≤–∏–ª –æ—Ç–∑—ã–≤, –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ

    buttons = [
        InlineKeyboardButton(
            text=f"{i}‚≠êÔ∏è",
            callback_data=f"rate:{order_id}:{reviewed_id}:{target_role}:{i}"
        )
        for i in range(5, 0, -1)  # –û—Ç 5 –¥–æ 1
    ]

    keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons])  # –í—Å–µ –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–∏–Ω —Ä—è–¥

    await bot.send_message(
        user_id,
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ {target_role} –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ #{order_id}:",
        reply_markup=keyboard
    )

@dp.message(ReviewStates.waiting_for_comment)
async def handle_review_comment(message: Message, state: FSMContext):
    data = await state.get_data()
    comment = message.text.strip()
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Ö–æ—á–µ—Ç –ø–∏—Å–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    if comment == "-":
        comment = None

    cursor.execute("""
        UPDATE reviews SET comment = %s
        WHERE order_id = %s AND reviewer_id = %s
    """, (comment, data['order_id'], data['reviewer_id']))
    conn.commit()

    await message.answer("–í–∞—à –æ—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –°–ø–∞—Å–∏–±–æ!")
    await state.clear()

def format_messages(messages: list, current_user_id: int):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤—Å–µ—Ö –ø–æ–ª–µ–π"""
    formatted = []
    for msg in messages:
        try:
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            sender = "üë§ –í—ã" if msg.get('sender_id') == current_user_id else f"üë®‚Äçüíª {msg.get('sender_name', '–ê–Ω–æ–Ω–∏–º')}"
            text = msg.get('message_text', '[–Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞]')
            time = msg.get('message_time', datetime.now())
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
            if isinstance(time, datetime):
                time_str = time.strftime("%d.%m %H:%M")
            else:
                time_str = "--:-- --.--"
            
            formatted.append(f"{sender} ({time_str}):\n{text}\n")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            continue
    
    return "\n".join(formatted) if formatted else "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π"

@dp.message(OrderCreationStates.discussing)
async def handle_prechat_message(message: Message, state: FSMContext):
    data = await state.get_data()
    chat_id = data.get('chat_id')
    
    if not chat_id:
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    save_message(chat_id, message.from_user.id, message.text)
    
    # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
    chat_data = get_prechat_participants(chat_id)
    recipient_id = chat_data['executor_id'] if message.from_user.id == chat_data['customer_id'] else chat_data['customer_id']
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    await bot.send_message(
        recipient_id,
        f"üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤ '–ú–æ–∏ —á–∞—Ç—ã'",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üí¨ –ú–æ–∏ —á–∞—Ç—ã")]],
            resize_keyboard=True
        )
    )
    
    await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

import os
import json
from uuid import uuid4

@dp.message(OrderStates.active_chat)
async def handle_chat_message(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        order_id = data['current_order']

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await message.delete()
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

        message_text = message.text or ""
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª
        if message.document:
            file_id = message.document.file_id
            file_name = message.document.file_name

            file = await bot.get_file(file_id)
            file_path = file.file_path

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
            file_code = str(uuid4())

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –∏ –∏–º—è —Ñ–∞–π–ª–∞ –≤ JSON
            with open(os.path.join("ids", f"{file_code}.json"), "w", encoding="utf-8") as f:
                json.dump({
                    "file_id": file_id,
                    "file_name": file_name
                }, f)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É
            bot_token = API_TOKEN  # –∏–ª–∏ os.getenv("BOT_TOKEN")
            message_text = f"üìé –§–∞–π–ª: [{file_name}](https://t.me/{(await bot.get_me()).username}?start=getfile_{file_code})"

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î
        save_result = save_message_with_chat_data(
            order_id=order_id,
            sender_id=message.from_user.id,
            message_text=message_text
        )
        
        if not save_result:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")

        participants = get_chat_participants(order_id)
        if not participants:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞")

        await update_chat_for_order(
            order_id=order_id,
            current_user_id=message.from_user.id
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_chat_message: {e}")

async def is_user_in_chat(user_id: int, order_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —ç—Ç–æ–≥–æ —á–∞—Ç–∞"""
    storage_key = StorageKey(
        chat_id=user_id,
        user_id=user_id,
        bot_id=bot.id
    )
    state = FSMContext(storage=dp.storage, key=storage_key)
    data = await state.get_data()
    return data.get('current_order') == order_id

async def update_chat_for_order(order_id: int, current_user_id: int):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    participants = get_chat_participants(order_id)
    if not participants:
        return

    messages = get_order_messages(order_id, limit=15)
    history_text = format_history(messages, current_user_id)

    for user_id in [participants['customer_id'], participants['executor_id']]:

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —ç—Ç–æ–º —á–∞—Ç–µ
        if not await is_user_in_chat(user_id, order_id):
            continue

        try:
            state = FSMContext(
                storage=dp.storage,
                key=StorageKey(chat_id=user_id, user_id=user_id, bot_id=bot.id)
            )
            data = await state.get_data()
            last_message_id = data.get('history_message_id')

            # –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            try:
                # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
                if last_message_id:
                    await bot.delete_message(chat_id=user_id, message_id=last_message_id)
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å—Ç–æ—Ä–∏–µ–π
            msg = await bot.send_message(
                chat_id=user_id,
                text=history_text,
                reply_markup=get_order_chat_keyboard(order_id)
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(history_message_id=msg.message_id)

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —á–∞—Ç–∞ –¥–ª—è {user_id}: {e}")

def format_history(messages: list, current_user_id: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è"""
    history_text = "üìú –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏:\n\n"
    for msg in messages:
        sender = "üë§ –í—ã" if msg['sender_id'] == current_user_id else f"üë®‚Äçüíª {msg['sender_name']}"
        time_str = msg['sent_at'].strftime('%d.%m %H:%M') if isinstance(msg['sent_at'], datetime) else "--:-- --.--"
        history_text += f"{sender} ({time_str}):\n{msg['message_text']}\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
    return history_text

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ show_executor_page
@dp.message(BrowsingExecutors.viewing)
async def handle_executor_browsing(message: Message, state: FSMContext):
    data = await state.get_data()
    
    # –ï—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ —Ç—Ä–µ–±—É–µ—Ç current_order, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ –Ω–∞–ª–∏—á–∏–µ
    if message.text.startswith("üì® –ù–∞–ø–∏—Å–∞—Ç—å"):
        if not data.get('current_order'):
            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ –º–µ–Ω—é")
            return
    
    if message.text == "üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–≤—ã–∫—É":
        await message.answer("üîç –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
        await state.update_data(waiting_for_search=True)
    elif message.text == "üîç –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–Ω–∫–µ—Ç—ã":
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∞–Ω–∫–µ—Ç—ã —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        await state.update_data(page=0, search_term=None, waiting_for_search=False)
        await show_executor_page(message.from_user.id, state, 0)
    elif message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        await state.clear()
        await message.answer("üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –∑–∞–∫–∞–∑—á–∏–∫–∞", reply_markup=get_customer_menu())
    elif message.text in ["‚ñ∂Ô∏è –í–ø–µ—Ä—ë–¥", "‚óÄÔ∏è –ù–∞–∑–∞–¥"]:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        current_page = data.get("page", 0)
        search_term = data.get("search_term")
        
        if message.text == "‚ñ∂Ô∏è –í–ø–µ—Ä—ë–¥":
            current_page += 1
        elif message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
            current_page -= 1
        
        await show_executor_page(message.from_user.id, state, current_page, search_term)
    elif data.get("waiting_for_search"):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        await state.update_data(
            page=0, 
            search_term=message.text, 
            waiting_for_search=False
        )
        await show_executor_page(message.from_user.id, state, 0, message.text)
    else:
        current_page = data.get("page", 0)
        has_next = data.get("has_next", False)
        is_search = data.get("search_term") is not None
        await message.answer(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏", 
            reply_markup=get_executor_browsing_keyboard(current_page, has_next, is_search)
        )

@dp.message()
async def echo(message: Message):
    await message.answer(f"–î–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
